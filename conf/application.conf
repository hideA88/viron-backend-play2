app {
  profile = "dev"
  profile = ${?APP_PROFILE}
}

play {
  application {
    loader = models.hidea88.viron.app.VironBackendApplicationLoader
  }
  filters {
    cors {
      allowedOrigins = ["http://localhost:9000"]
    }
    hosts {
      allowed = ["."]
    }
    headers {
      contentSecurityPolicy = "default-src https://pugjs.org 'self' 'unsafe-eval';"
    }
    csrf {
      header {
        bypassHeaders {
          X-Requested-With = "*"
        }
      }
    }
  }
  i18n {
    langs = ["en", "ja"]
  }

  assets {
    path = "/public"
    urlPrefix = "/admin"
  }
}

db {
  default = {
    driver = "org.postgresql.Driver"
    url = "jdbc:postgresql://127.0.0.1:5432/testdb"
    url = ${?VIRON_DB_URL}
    user = "test"
    user = ${?VIRON_DB_USER}
    password = "password"
    password = ${?VIRON_DB_PASSWORD}
    poolInitialSize = 5
    poolMaxSize = 50
    poolConnectionTimeoutMillis = 1000
    poolValidationQuery = "SELECT 1"
  }
}

scalikejdbc.global {
  loggingSQLAndTime {
    enabled = true
    logLevel = debug
    singleLineMode = true
    warningEnabled = true
    warningThresholdMillis = 1000
    warningLogLevel = warn
  }
}

authentication {

  google.oauth {
    auth.uri        = "https://accounts.google.com/o/oauth2/v2/auth"
    client.id       = "clientid"
    client.id       = ${?GOOGLE_AUTH_CLIENT_ID}
    client.secret   = "clentsecret"
    client.secret   = ${?GOOGLE_AUTH_CLIENT_SECRET}
    token.endpoint  = "https://accounts.google.com/o/oauth2/token"
    redirect.url    = "http://localhost:9000/googleoauth2callback"
    crypto.secret   = "hogehogehogehgoe"
    crypto.secret   = ${?GOOGLE_AUTH_CRYPTO_SECRET}
    grant.type      = "authorization_code"
    scope           = "openid%20email"
    response.type   = "code"
    request.timeout = 3000
  }

  # JWT authenticator settings (JSON Web Tokens)
  jwt.authenticator.headerName = "Authorization"
  jwt.authenticator.issuerClaim = "HOGE"
  jwt.authenticator.encryptSubject = true
  jwt.authenticator.authenticatorExpiry = 12 hours
  jwt.authenticator.sharedSecret = "serctreatehoge"
  jwt.authenticator.sharedSecret = ${?JWT_SHARED_SERCRET}
  jwt.authenticator.crypter.key  = "hogehogehogehoge" // A unique encryption key
  jwt.authenticator.crypter.key  = ${?JWT_CRYPTER_KEY}
}


